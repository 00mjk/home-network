apiVersion: batch/v1
kind: Job
metadata:
  name: drone-postgres-init
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: drone-postgres-init
          image: postgres:9
          command:
            - sh
            - -c
            - psql -h postgres --user postgres -c "CREATE DATABASE drone;"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-root-password
                  key: value
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-deployment
  labels:
    app: drone
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app: drone
  template:
    metadata:
      labels:
        app: drone
    spec:
      containers:
        - name: drone
          image: drone/drone:1.2.3
          env:
            - name: DRONE_USER_CREATE
              value: username:aleem,admin:true
            - name: DRONE_GITEA_SERVER
              value: https://gitea.internal.aleemhaji.com
            - name: DRONE_SERVER_HOST
              value: drone.internal.aleemhaji.com
            - name: DRONE_SERVER_PROTO
              value: https
            - name: DRONE_DATABASE_DRIVER
              value: postgres
            - name: DRONE_DATABASE_DATASOURCE
              valueFrom:
                secretKeyRef:
                  name: drone-secrets
                  key: database
          ports:
            - containerPort: 80
          volumeMounts:
            - name: docker-sock
              mountPath: /var/run/docker.sock
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
---
apiVersion: v1
kind: Service
metadata:
  name: drone
  labels:
    app: drone
spec:
  ports:
    - port: 80
      protocol: TCP
  type: LoadBalancer
  loadBalancerIP:
  selector:
    app: drone
